const express = require('express')
const router = express.Router()
const bodyParser = require('body-parser')
const urlencodedParser = bodyParser.urlencoded({ extended: false })
router.use(urlencodedParser)
const cors = require('cors')
const app = express()
const { db, shuffle } = require('./public/js/method')
const http = require('http')
const ws = require('socket.io')
const roommsg = []//[{roomid:'no1',member:[{nick:'nick',poker:[],flag:true},{nick:'nick'}],lastPoker}]
app.use(cors())
app.use(express.static(__dirname))
//router
router
.get('/',(req,res) => {
	res.send('<h1>title</h1>')
})
.post('/login',async(req,res) => {
	const {nick,password} = req.body
	if(nick.length > 10 || password.length < 3)
		return res.send({status:0,message:'昵称或密码长度不符合要求'})
	let {length} = await db(`select * from user where nick='${nick}'`)
	if(length){
	const result = await db(`select * from user where nick='${nick}' and password='${password}'`)//已存在昵称，验证密码
		if(result.length > 0) 
			res.send({status:2,message:'登陆成功',roommsg}) 
		else
			res.send({status:1,message:'密码错误'})
	}
	else{//新昵称，注册账号
		const {affectedRows} = await db(`insert into user values('${nick}','${password}','${new Date().getTime()}')`)
		if(affectedRows > 0)
			res.send({status:3,message:'新注册',roommsg})//Date.now()
		else 
			res.send({status:4,message:'注册失败'})
	}
})
.delete('someone',(req,res) => {

})

app.use(router)
let server = http.createServer(app)
let io = ws(server)
//socket.io
const fn = (msg,id) => {
	msg.filter(each => each.roomid == id)
}
const mapMsg = (msg) => {
	return msg.map(each => {
		each.member = each.member.length
	})
}
io.on('connection',(socket) => {
	console.log('new user coming')
	const init_room = 'A(9DJ)+.?/$'
	let roomid = init_room,current_nick
	socket.join(roomid)
	socket.on('join',({nick,id}) => {
		const result = roommsg.filter(each => each.roomid == id && each.member.length < 3)
		if(result.length > 0)
			{
				current_nick = nick
				socket.leave(init_room)
				roomid = id
				socket.join(roomid)
				result[0].member.push({nick})//[roomid:'dasf',member:[{nick,poker}],lastpoker:]
				if(result[0].member.length == 3)
					{
						const pokers = shuffle()
						result[0].member.forEach((each,index) => Object.assign(each,{poker:pokers[index]}))
						result[0].lastPoker = pokers[3]
					}
				socket.emit('receiver',{type:1,status:1,message:'加入房间成功',id,roommsg})
				//fn(roommsg,roomid)
				// io.sockets.in(roomid).emit('renew',{roommsg})
				// io.sockets.in(init_room).emit('renew',{roommsg})
				io.emit('renew',{roommsg})
			}
		else
			socket.emit('receiver',{type:1,status:0,message:'加入房间失败，房间已满或不存在'})
		
	})
	socket.on('create',({nick,id})=> {
		const result = roommsg.filter(each => each.roomid == id )
		if(!result.length)//可以创建
		{
			roommsg.push({roomid:id,member:[]})
			socket.emit('receiver',{type:2,status:1,message:'创建成功',id,roommsg})
			io.emit('renew',{roommsg})
		}else{//房间已存在，创建失败
			socket.emit('receiver',{type:2,status:0,message:'房间已存在，创建失败'})
		}
	})
	socket.on('leave',({nick,id}) => {
		const result = roommsg.filter(each => each.roomid == id)[0]
		// const index = result.member.indexOf(nick)
		// result.member.splice(index,1)
		socket.leave(roomid)
	})
	socket.on('renewRoomMsg',({nick,content,change}) => {
		console.log(content,nick)
		// roommsg.find(nick).refresh(content)
		// io.sockets.in(roomid).emit('renew',{roommsg,change,nick})
	})
	socket.on('disconnect',() => {
		console.log('someone disconnect!')
		socket.leave(roomid)
		// roommsg.forEach(each => each.member.forEach(e => if(e.nick == current_nick) ))
	})
})
server.listen(3000,() => {console.log('server start!')})






